using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.Networking;

/// <summary>
/// Unity VR API 통합 관리자 (v2.0)
/// 
/// 주요 기능:
/// - 사용자 관리 (등록, 로그인, 로그아웃)  
/// - VR 기기 로깅 (기기 기반 사용 기록)
/// - 콘텐츠 로깅 (사용자 기반 콘텐츠 사용 기록)
/// - 콘텐츠 데이터 조회
/// - 통합 세션 관리
/// - 한국 시간대 지원
/// 
/// 사용법:
/// 1. VRApiManager를 씬에 추가
/// 2. 기기 ID와 기본 사용자명 설정
/// 3. StartUnifiedSession() / EndUnifiedSession() 호출로 간편 사용
/// </summary>
public class VRApiManager : MonoBehaviour
{
    #region 설정 및 상수
    
    private const string API_BASE_URL = "https://ewyqozozuluyfnemgsuw.supabase.co/functions/v1/vr-log-api";
    
    [Header("=== 기기 설정 ===")]
    [SerializeField] private string deviceId = "VR_DEVICE_001";
    [Tooltip("체크하면 시스템 고유 ID로 자동 생성")]
    [SerializeField] private bool autoGenerateDeviceId = false;
    
    [Header("=== 기본 사용자 설정 ===")]
    [SerializeField] private string defaultUsername = "VRUser";
    [Tooltip("시작시 자동으로 사용자 초기화 (로그인 또는 등록)")]
    [SerializeField] private bool autoInitializeUser = true;
    
    [Header("=== 디버그 설정 ===")]
    [SerializeField] private bool enableDebugLogs = true;
    [SerializeField] private bool enableDetailedLogs = false; // API 요청/응답 상세 로그
    
    [Header("=== 네트워크 설정 ===")]
    [SerializeField] private int timeoutSeconds = 30;
    [SerializeField] private int maxRetryAttempts = 3;
    
    #endregion
    
    #region 상태 변수
    
    // 사용자 상태
    private UserData currentUser;
    private SessionData currentSession;
    private bool isLoggedIn = false;
    
    // 활성 세션 추적
    private Dictionary<string, SessionTracker> activeVRSessions = new Dictionary<string, SessionTracker>();
    private Dictionary<string, SessionTracker> activeContentSessions = new Dictionary<string, SessionTracker>();
    
    // 콘텐츠 데이터 캐시
    private ContentData[] cachedContentData;
    private DateTime lastContentDataUpdate;
    
    #endregion
    
    #region 이벤트
    
    public event System.Action<UserData> OnUserRegistered;
    public event System.Action<UserData, SessionData> OnUserLoggedIn;
    public event System.Action OnUserLoggedOut;
    public event System.Action<string> OnSessionStarted;
    public event System.Action<string, double> OnSessionEnded; // contentName, duration
    public event System.Action<ContentData[]> OnContentDataLoaded;
    public event System.Action<string> OnApiError;
    
    #endregion
    
    #region 프로퍼티
    
    public bool IsLoggedIn => isLoggedIn;
    public UserData CurrentUser => currentUser;
    public SessionData CurrentSession => currentSession;
    public string DeviceId => deviceId;
    public Dictionary<string, SessionTracker> ActiveVRSessions => new Dictionary<string, SessionTracker>(activeVRSessions);
    public Dictionary<string, SessionTracker> ActiveContentSessions => new Dictionary<string, SessionTracker>(activeContentSessions);
    
    #endregion
    
    #region Unity 생명주기
    
    void Start()
    {
        InitializeManager();
    }
    
    void OnApplicationPause(bool pauseStatus)
    {
        if (pauseStatus)
        {
            DebugLog("애플리케이션 일시정지 - 모든 세션 종료");
            EndAllActiveSessions();
        }
    }
    
    void OnApplicationFocus(bool hasFocus)
    {
        if (!hasFocus)
        {
            DebugLog("애플리케이션 포커스 잃음 - 모든 세션 종료");
            EndAllActiveSessions();
        }
    }
    
    void OnApplicationQuit()
    {
        DebugLog("애플리케이션 종료 - 정리 작업 시작");
        EndAllActiveSessions();
        
        if (isLoggedIn && currentSession != null)
        {
            StartCoroutine(LogoutUser());
        }
    }
    
    #endregion
    
    #region 초기화
    
    private void InitializeManager()
    {
        DebugLog("=== VR API Manager 초기화 시작 ===");
        
        // 기기 ID 설정
        InitializeDeviceId();
        
        // 저장된 사용자 데이터 로드
        LoadUserData();
        
        // 자동 사용자 초기화
        if (autoInitializeUser)
        {
            StartCoroutine(AutoInitializeUser());
        }
        
        DebugLog($"VR API Manager 초기화 완료 - Device: {deviceId}");
    }
    
    private void InitializeDeviceId()
    {
        if (autoGenerateDeviceId || string.IsNullOrEmpty(deviceId))
        {
            string uniqueId = SystemInfo.deviceUniqueIdentifier;
            if (!string.IsNullOrEmpty(uniqueId) && uniqueId.Length >= 8)
            {
                deviceId = $"VR_DEVICE_{uniqueId.Substring(0, 8).ToUpper()}";
            }
            else
            {
                deviceId = $"VR_DEVICE_{System.Guid.NewGuid().ToString().Substring(0, 8).ToUpper()}";
            }
        }
        
        DebugLog($"기기 ID 설정: {deviceId}");
    }
    
    private IEnumerator AutoInitializeUser()
    {
        yield return new WaitForSeconds(0.5f); // 초기화 대기
        
        if (currentUser == null || string.IsNullOrEmpty(currentUser.username))
        {
            // 신규 사용자 등록
            string timestamp = GetKoreanTime().ToString("yyyyMMddHHmmss");
            string uniqueUsername = $"{defaultUsername}_{timestamp}";
            
            DebugLog($"신규 사용자 자동 등록: {uniqueUsername}");
            yield return StartCoroutine(RegisterUser(uniqueUsername));
        }
        else
        {
            // 기존 사용자 로그인
            DebugLog($"기존 사용자 자동 로그인: {currentUser.username}");
            yield return StartCoroutine(LoginUser(currentUser.username));
        }
    }
    
    #endregion
    
    #region 사용자 관리
    
    /// <summary>
    /// 계정 존재 여부 확인
    /// </summary>
    /// <param name="username">확인할 사용자명</param>
    /// <param name="callback">결과 콜백 (true: 존재, false: 없음)</param>
    public IEnumerator CheckUserExists(string username, System.Action<bool> callback)
    {
        if (string.IsNullOrEmpty(username))
        {
            callback?.Invoke(false);
            yield break;
        }
        
        DebugLog($"계정 존재 확인 시작: {username}");
        
        var request = new ApiRequest
        {
            action = "check_user",
            username = username
        };
        
        yield return StartCoroutine(SendApiRequest(request, (response) =>
        {
            bool userExists = response.success && response.data != null;
            
            if (userExists)
            {
                var userData = JsonUtility.FromJson<UserExistsData>(JsonUtility.ToJson(response.data));
                userExists = userData.exists;
            }
            
            DebugLog($"계정 존재 확인 결과: {username} = {userExists}");
            callback?.Invoke(userExists);
        }));
    }
    
    /// <summary>
    /// 자동 로그인 (계정이 없으면 자동 생성 후 로그인)
    /// </summary>
    /// <param name="username">로그인할 사용자명</param>
    public IEnumerator AutoLogin(string username)
    {
        if (string.IsNullOrEmpty(username))
        {
            OnApiError?.Invoke("사용자명이 비어있습니다.");
            yield break;
        }
        
        DebugLog($"자동 로그인 시작: {username}");
        
        var request = new ApiRequest
        {
            action = "auto_login",
            username = username
        };
        
        yield return StartCoroutine(SendApiRequest(request, (response) =>
        {
            if (response.success && response.data != null)
            {
                var loginData = JsonUtility.FromJson<LoginData>(JsonUtility.ToJson(response.data));
                currentUser = loginData.user;
                currentSession = loginData.session;
                isLoggedIn = true;
                
                SaveUserData();
                DebugLog($"자동 로그인 성공: {currentUser.username}");
                OnUserLoggedIn?.Invoke(currentUser, currentSession);
            }
            else
            {
                string errorMsg = $"자동 로그인 실패: {response.error}";
                DebugLog(errorMsg);
                OnApiError?.Invoke(errorMsg);
            }
        }));
    }
    
    /// <summary>
    /// 사용자 등록
    /// </summary>
    /// <param name="username">등록할 사용자명</param>
    public IEnumerator RegisterUser(string username)
    {
        if (string.IsNullOrEmpty(username))
        {
            OnApiError?.Invoke("사용자명이 비어있습니다.");
            yield break;
        }
        
        DebugLog($"사용자 등록 시작: {username}");
        
        var request = new ApiRequest
        {
            action = "register",
            username = username
        };
        
        yield return StartCoroutine(SendApiRequest(request, (response) =>
        {
            if (response.success && response.data != null)
            {
                currentUser = JsonUtility.FromJson<UserData>(JsonUtility.ToJson(response.data));
                SaveUserData();
                
                DebugLog($"사용자 등록 성공: {currentUser.username}");
                OnUserRegistered?.Invoke(currentUser);
                
                // 등록 후 자동 로그인
                StartCoroutine(LoginUser(currentUser.username));
            }
            else
            {
                string errorMsg = $"사용자 등록 실패: {response.error}";
                DebugLog(errorMsg);
                OnApiError?.Invoke(errorMsg);
            }
        }));
    }
    
    /// <summary>
    /// 사용자 로그인
    /// </summary>
    /// <param name="username">로그인할 사용자명</param>
    public IEnumerator LoginUser(string username)
    {
        if (string.IsNullOrEmpty(username))
        {
            OnApiError?.Invoke("사용자명이 비어있습니다.");
            yield break;
        }
        
        DebugLog($"사용자 로그인 시작: {username}");
        
        var request = new ApiRequest
        {
            action = "login",
            username = username
        };
        
        yield return StartCoroutine(SendApiRequest(request, (response) =>
        {
            if (response.success && response.data != null)
            {
                var loginData = JsonUtility.FromJson<LoginData>(JsonUtility.ToJson(response.data));
                currentUser = loginData.user;
                currentSession = loginData.session;
                isLoggedIn = true;
                
                SaveUserData();
                DebugLog($"로그인 성공: {currentUser.username}");
                OnUserLoggedIn?.Invoke(currentUser, currentSession);
            }
            else
            {
                string errorMsg = $"로그인 실패: {response.error}";
                DebugLog(errorMsg);
                
                // 사용자를 찾을 수 없는 경우 자동 등록 시도
                if (response.error != null && response.error.Contains("찾을 수 없습니다"))
                {
                    DebugLog($"사용자가 존재하지 않아 자동 등록 시도: {username}");
                    StartCoroutine(RegisterUser(username));
                }
                else
                {
                    OnApiError?.Invoke(errorMsg);
                }
            }
        }));
    }
    
    /// <summary>
    /// 사용자 로그아웃
    /// </summary>
    public IEnumerator LogoutUser()
    {
        if (!isLoggedIn || currentSession == null)
        {
            DebugLog("로그인되지 않은 상태입니다.");
            yield break;
        }
        
        DebugLog($"사용자 로그아웃 시작: {currentUser.username}");
        
        // 모든 활성 세션 종료
        EndAllActiveSessions();
        
        var request = new ApiRequest
        {
            action = "logout",
            session_id = currentSession.id
        };
        
        yield return StartCoroutine(SendApiRequest(request, (response) =>
        {
            isLoggedIn = false;
            currentSession = null;
            ClearUserData();
            
            DebugLog("로그아웃 완료");
            OnUserLoggedOut?.Invoke();
        }));
    }
    
    #endregion
    
    #region VR 로깅 (기기 기반)
    
    /// <summary>
    /// VR 세션 시작 (기기 기반 로깅)
    /// </summary>
    /// <param name="contentName">콘텐츠 이름</param>
    public void StartVRSession(string contentName)
    {
        if (string.IsNullOrEmpty(contentName))
        {
            OnApiError?.Invoke("콘텐츠명이 비어있습니다.");
            return;
        }
        
        if (activeVRSessions.ContainsKey(contentName))
        {
            DebugLog($"이미 진행 중인 VR 세션: {contentName}");
            return;
        }
        
        var tracker = new SessionTracker
        {
            contentName = contentName,
            startTime = DateTime.UtcNow,
            sessionType = SessionType.VR
        };
        
        activeVRSessions[contentName] = tracker;
        
        var request = new ApiRequest
        {
            action = "vr_log",
            device_id = deviceId,
            content_name = contentName,
            start_time = tracker.startTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            username = currentUser?.username
        };
        
        StartCoroutine(SendApiRequest(request, (response) =>
        {
            if (response.success)
            {
                DebugLog($"VR 세션 시작 기록 완료: {contentName}");
                OnSessionStarted?.Invoke($"VR-{contentName}");
            }
            else
            {
                string errorMsg = $"VR 세션 시작 기록 실패: {response.error}";
                DebugLog(errorMsg);
                OnApiError?.Invoke(errorMsg);
                
                // 실패한 세션 제거
                activeVRSessions.Remove(contentName);
            }
        }));
    }
    
    /// <summary>
    /// VR 세션 종료 (기기 기반 로깅)
    /// </summary>
    /// <param name="contentName">콘텐츠 이름</param>
    public void EndVRSession(string contentName)
    {
        if (!activeVRSessions.TryGetValue(contentName, out SessionTracker tracker))
        {
            DebugLog($"진행 중이지 않은 VR 세션: {contentName}");
            return;
        }
        
        activeVRSessions.Remove(contentName);
        DateTime endTime = DateTime.UtcNow;
        double durationMinutes = (endTime - tracker.startTime).TotalMinutes;
        
        var request = new ApiRequest
        {
            action = "vr_log",
            device_id = deviceId,
            content_name = contentName,
            start_time = tracker.startTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            end_time = endTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            username = currentUser?.username
        };
        
        StartCoroutine(SendApiRequest(request, (response) =>
        {
            if (response.success)
            {
                DebugLog($"VR 세션 종료 기록 완료: {contentName} (사용시간: {durationMinutes:F1}분)");
                OnSessionEnded?.Invoke($"VR-{contentName}", durationMinutes);
            }
            else
            {
                string errorMsg = $"VR 세션 종료 기록 실패: {response.error}";
                DebugLog(errorMsg);
                OnApiError?.Invoke(errorMsg);
            }
        }));
    }
    
    #endregion
    
    #region 콘텐츠 로깅 (사용자 기반)
    
    /// <summary>
    /// 콘텐츠 세션 시작 (사용자 기반 로깅)
    /// </summary>
    /// <param name="contentName">콘텐츠 이름</param>
    public void StartContentSession(string contentName)
    {
        if (!isLoggedIn)
        {
            OnApiError?.Invoke("로그인되지 않은 상태에서는 콘텐츠 로깅이 불가능합니다.");
            return;
        }
        
        if (string.IsNullOrEmpty(contentName))
        {
            OnApiError?.Invoke("콘텐츠명이 비어있습니다.");
            return;
        }
        
        if (activeContentSessions.ContainsKey(contentName))
        {
            DebugLog($"이미 진행 중인 콘텐츠 세션: {contentName}");
            return;
        }
        
        var tracker = new SessionTracker
        {
            contentName = contentName,
            startTime = DateTime.UtcNow,
            sessionType = SessionType.Content
        };
        
        activeContentSessions[contentName] = tracker;
        
        var request = new ApiRequest
        {
            action = "content_log",
            username = currentUser.username,
            content_name = contentName,
            start_time = tracker.startTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        };
        
        StartCoroutine(SendApiRequest(request, (response) =>
        {
            if (response.success)
            {
                DebugLog($"콘텐츠 세션 시작 기록 완료: {contentName}");
                OnSessionStarted?.Invoke($"Content-{contentName}");
            }
            else
            {
                string errorMsg = $"콘텐츠 세션 시작 기록 실패: {response.error}";
                DebugLog(errorMsg);
                OnApiError?.Invoke(errorMsg);
                
                // 실패한 세션 제거
                activeContentSessions.Remove(contentName);
            }
        }));
    }
    
    /// <summary>
    /// 콘텐츠 세션 종료 (사용자 기반 로깅)
    /// </summary>
    /// <param name="contentName">콘텐츠 이름</param>
    public void EndContentSession(string contentName)
    {
        if (!isLoggedIn)
        {
            DebugLog("로그인되지 않은 상태입니다.");
            return;
        }
        
        if (!activeContentSessions.TryGetValue(contentName, out SessionTracker tracker))
        {
            DebugLog($"진행 중이지 않은 콘텐츠 세션: {contentName}");
            return;
        }
        
        activeContentSessions.Remove(contentName);
        DateTime endTime = DateTime.UtcNow;
        double durationMinutes = (endTime - tracker.startTime).TotalMinutes;
        
        var request = new ApiRequest
        {
            action = "content_log",
            username = currentUser.username,
            content_name = contentName,
            start_time = tracker.startTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"),
            end_time = endTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        };
        
        StartCoroutine(SendApiRequest(request, (response) =>
        {
            if (response.success)
            {
                DebugLog($"콘텐츠 세션 종료 기록 완료: {contentName} (사용시간: {durationMinutes:F1}분)");
                OnSessionEnded?.Invoke($"Content-{contentName}", durationMinutes);
            }
            else
            {
                string errorMsg = $"콘텐츠 세션 종료 기록 실패: {response.error}";
                DebugLog(errorMsg);
                OnApiError?.Invoke(errorMsg);
            }
        }));
    }
    
    #endregion
    
    #region 콘텐츠 데이터 관리
    
    /// <summary>
    /// 콘텐츠 데이터 목록 조회
    /// </summary>
    /// <param name="limit">가져올 최대 개수 (기본: 100, 최대: 1000)</param>
    /// <param name="forceRefresh">캐시 무시하고 새로 조회</param>
    public void GetContentDataList(int limit = 100, bool forceRefresh = false)
    {
        // 캐시된 데이터가 있고 1시간 이내라면 캐시 사용
        if (!forceRefresh && cachedContentData != null && 
            (DateTime.Now - lastContentDataUpdate).TotalHours < 1)
        {
            DebugLog("캐시된 콘텐츠 데이터 사용");
            OnContentDataLoaded?.Invoke(cachedContentData);
            return;
        }
        
        StartCoroutine(GetContentDataCoroutine(limit));
    }
    
    private IEnumerator GetContentDataCoroutine(int limit)
    {
        string url = $"{API_BASE_URL}?type=content_data&limit={Mathf.Min(limit, 1000)}";
        
        DebugLog($"콘텐츠 데이터 요청: {url}");
        
        using (UnityWebRequest request = UnityWebRequest.Get(url))
        {
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = timeoutSeconds;
            
            yield return request.SendWebRequest();
            
            if (request.result == UnityWebRequest.Result.Success)
            {
                try
                {
                    string responseText = request.downloadHandler.text;
                    if (enableDetailedLogs)
                    {
                        DebugLog($"콘텐츠 데이터 응답: {responseText}");
                    }
                    
                    ContentDataResponse response = JsonUtility.FromJson<ContentDataResponse>(responseText);
                    
                    if (response.success)
                    {
                        cachedContentData = response.data;
                        lastContentDataUpdate = DateTime.Now;
                        
                        DebugLog($"콘텐츠 데이터 {response.data.Length}개 로드 성공");
                        OnContentDataLoaded?.Invoke(response.data);
                    }
                    else
                    {
                        string errorMsg = response.error ?? "알 수 없는 오류";
                        DebugLog($"콘텐츠 데이터 로드 실패: {errorMsg}");
                        OnApiError?.Invoke(errorMsg);
                    }
                }
                catch (Exception e)
                {
                    string errorMsg = $"응답 파싱 오류: {e.Message}";
                    DebugLog(errorMsg);
                    OnApiError?.Invoke(errorMsg);
                }
            }
            else
            {
                string errorMsg = $"HTTP 오류: {request.error} (Code: {request.responseCode})";
                DebugLog(errorMsg);
                OnApiError?.Invoke(errorMsg);
            }
        }
    }
    
    /// <summary>
    /// 콘텐츠 이름으로 콘텐츠 데이터 검색
    /// </summary>
    /// <param name="contentName">검색할 콘텐츠 이름</param>
    /// <returns>찾은 콘텐츠 데이터, 없으면 null</returns>
    public ContentData FindContentByName(string contentName)
    {
        if (cachedContentData == null || string.IsNullOrEmpty(contentName))
            return null;
            
        foreach (var content in cachedContentData)
        {
            if (content.content_name.Equals(contentName, StringComparison.OrdinalIgnoreCase))
            {
                return content;
            }
        }
        
        return null;
    }
    
    #endregion
    
    #region 편의 메서드
    
    /// <summary>
    /// 통합 세션 시작 (VR + 콘텐츠 로깅 동시 실행)
    /// 추천 사용법: 대부분의 경우 이 메서드를 사용하세요
    /// </summary>
    /// <param name="contentName">콘텐츠 이름</param>
    public void StartUnifiedSession(string contentName)
    {
        DebugLog($"통합 세션 시작: {contentName}");
        StartVRSession(contentName);
        StartContentSession(contentName);
    }
    
    /// <summary>
    /// 통합 세션 종료 (VR + 콘텐츠 로깅 동시 종료)
    /// </summary>
    /// <param name="contentName">콘텐츠 이름</param>
    public void EndUnifiedSession(string contentName)
    {
        DebugLog($"통합 세션 종료: {contentName}");
        EndVRSession(contentName);
        EndContentSession(contentName);
    }
    
    /// <summary>
    /// 모든 활성 세션 종료
    /// </summary>
    public void EndAllActiveSessions()
    {
        DebugLog("모든 활성 세션 종료 시작");
        
        // VR 세션들 종료
        var vrSessions = new List<string>(activeVRSessions.Keys);
        foreach (var contentName in vrSessions)
        {
            EndVRSession(contentName);
        }
        
        // 콘텐츠 세션들 종료
        var contentSessions = new List<string>(activeContentSessions.Keys);
        foreach (var contentName in contentSessions)
        {
            EndContentSession(contentName);
        }
        
        DebugLog($"총 {vrSessions.Count + contentSessions.Count}개 세션 종료 완료");
    }
    
    /// <summary>
    /// 사용자 변경 (현재 세션들을 모두 종료하고 새 사용자로 전환)
    /// </summary>
    /// <param name="newUsername">새 사용자명</param>
    public IEnumerator SwitchUser(string newUsername)
    {
        DebugLog($"사용자 전환 시작: {currentUser?.username} -> {newUsername}");
        
        EndAllActiveSessions();
        
        if (isLoggedIn)
        {
            yield return StartCoroutine(LogoutUser());
        }
        
        yield return StartCoroutine(LoginUser(newUsername));
        
        DebugLog($"사용자 전환 완료: {newUsername}");
    }
    
    /// <summary>
    /// 현재 활성 세션 개수 조회
    /// </summary>
    /// <returns>활성 세션 개수 (VR + 콘텐츠)</returns>
    public int GetActiveSessionCount()
    {
        return activeVRSessions.Count + activeContentSessions.Count;
    }
    
    /// <summary>
    /// 특정 콘텐츠의 활성 세션 존재 여부 확인
    /// </summary>
    /// <param name="contentName">콘텐츠 이름</param>
    /// <returns>VR 또는 콘텐츠 세션이 활성화되어 있으면 true</returns>
    public bool IsSessionActive(string contentName)
    {
        return activeVRSessions.ContainsKey(contentName) || activeContentSessions.ContainsKey(contentName);
    }
    
    #endregion
    
    #region 데이터 관리
    
    private void SaveUserData()
    {
        if (currentUser != null)
        {
            string json = JsonUtility.ToJson(currentUser);
            PlayerPrefs.SetString("VRApi_UserData", json);
            DebugLog($"사용자 데이터 저장: {currentUser.username}");
        }
    }
    
    private void LoadUserData()
    {
        if (PlayerPrefs.HasKey("VRApi_UserData"))
        {
            string json = PlayerPrefs.GetString("VRApi_UserData");
            currentUser = JsonUtility.FromJson<UserData>(json);
            DebugLog($"사용자 데이터 로드: {currentUser?.username}");
        }
    }
    
    private void ClearUserData()
    {
        PlayerPrefs.DeleteKey("VRApi_UserData");
        currentUser = null;
        DebugLog("사용자 데이터 삭제");
    }
    
    #endregion
    
    #region 유틸리티
    
    /// <summary>
    /// 한국 시간 조회
    /// </summary>
    /// <returns>한국 표준시</returns>
    public DateTime GetKoreanTime()
    {
        try
        {
            TimeZoneInfo kst = TimeZoneInfo.FindSystemTimeZoneById("Korea Standard Time");
            return TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, kst);
        }
        catch
        {
            // 한국 시간대를 찾을 수 없는 경우 UTC+9로 계산
            return DateTime.UtcNow.AddHours(9);
        }
    }
    
    /// <summary>
    /// 사용자 친화적인 파일 크기 변환
    /// </summary>
    /// <param name="bytes">바이트 크기</param>
    /// <returns>읽기 쉬운 크기 문자열</returns>
    public string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024f:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / (1024f * 1024f):F1} MB";
        return $"{bytes / (1024f * 1024f * 1024f):F1} GB";
    }
    
    #endregion
    
    #region 내부 메서드
    
    /// <summary>
    /// API 요청 전송 (재시도 로직 포함)
    /// </summary>
    private IEnumerator SendApiRequest(ApiRequest request, System.Action<ApiResponse> callback)
    {
        string jsonData = JsonUtility.ToJson(request);
        
        if (enableDetailedLogs)
        {
            DebugLog($"API 요청 전송: {jsonData}");
        }
        
        for (int attempt = 1; attempt <= maxRetryAttempts; attempt++)
        {
            byte[] bodyRaw = Encoding.UTF8.GetBytes(jsonData);
            
            using (UnityWebRequest webRequest = new UnityWebRequest(API_BASE_URL, "POST"))
            {
                webRequest.uploadHandler = new UploadHandlerRaw(bodyRaw);
                webRequest.downloadHandler = new DownloadHandlerBuffer();
                webRequest.SetRequestHeader("Content-Type", "application/json");
                webRequest.timeout = timeoutSeconds;
                
                yield return webRequest.SendWebRequest();
                
                if (webRequest.result == UnityWebRequest.Result.Success)
                {
                    string responseText = webRequest.downloadHandler.text;
                    
                    if (enableDetailedLogs)
                    {
                        DebugLog($"API 응답 받음: {responseText}");
                    }
                    
                    try
                    {
                        ApiResponse response = JsonUtility.FromJson<ApiResponse>(responseText);
                        callback?.Invoke(response);
                        yield break; // 성공시 종료
                    }
                    catch (Exception e)
                    {
                        DebugLog($"응답 파싱 오류: {e.Message}");
                        callback?.Invoke(new ApiResponse { success = false, error = $"응답 파싱 오류: {e.Message}" });
                        yield break;
                    }
                }
                else
                {
                    if (attempt < maxRetryAttempts)
                    {
                        DebugLog($"API 요청 실패 (시도 {attempt}/{maxRetryAttempts}): {webRequest.error} - 재시도 중...");
                        yield return new WaitForSeconds(attempt); // 점진적 대기
                    }
                    else
                    {
                        string errorMsg = $"API 요청 최종 실패: {webRequest.error} (Code: {webRequest.responseCode})";
                        DebugLog(errorMsg);
                        callback?.Invoke(new ApiResponse { success = false, error = errorMsg });
                    }
                }
            }
        }
    }
    
    private void DebugLog(string message)
    {
        if (enableDebugLogs)
        {
            Debug.Log($"[VR API Manager] {DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
        }
    }
    
    #endregion
}